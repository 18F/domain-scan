#!/usr/bin/env python3

import os
import glob
from scanners import utils
import logging
import importlib
import csv


# basic setup - logs, output dirs
options = utils.options()
results_dir = options.get("output", "results")
utils.configure_logging(options)
utils.mkdir_p(utils.cache_dir())
utils.mkdir_p(results_dir)


###
# Entry point. `options` is a dict of CLI flags.
###
def run(options=None):

    if not options["_"]:
        logging.error("Provide a CSV file, or domain name.")
        exit()

    if not options.get("scan"):
        logging.error("--scan must be one or more scanners.")
        exit()

    domains = options["_"][0]

    # Which scanners to run the domain through.
    scans = []

    for name in options.get("scan").split(","):
        try:
            scanner = importlib.import_module("scanners.%s" % name)
        except ImportError:
            logging.error("Scanner not found: %s" % name)
            exit()

        # If the scanner has a canonical command, make sure it exists.
        if scanner.command and (not utils.try_command(scanner.command)):
            logging.error("[%s] Command not found: %s" %
                          (name, scanner.command))
            exit()

        # Scanners can have an optional init/validation hook.
        if scanner.init and (not scanner.init(options)):
            exit()

        scans.append(scanner)

    scan_domains(scans, domains)


###
# Given the selected scanners, and input domains, run each domain
# through each scanner.
#
# Produces a CSV for each scan, with each domain and results.
###
def scan_domains(scanners, domains):

    # Clear out existing result CSVs, to avoid inconsistent data.
    for result in glob.glob("%s/*.csv" % results_dir):
        os.remove(result)

    # Run through each scanner and open a file and CSV for each.
    handles = {}
    for scanner in scanners:
        name = scanner.__name__.split(".")[-1]  # e.g. 'inspect'
        scanner_file = open("%s/%s.csv" % (results_dir, name), 'w', newline='')
        scanner_writer = csv.writer(scanner_file)
        scanner_writer.writerow(["Domain"] + scanner.headers)

        handles[scanner] = {
            'file': scanner_file,
            'writer': scanner_writer
        }

    # For each domain, run through each scanner.
    for domain in domains_from(domains):
        for scanner in scanners:
            # A scanner can return multiple rows.
            for row in scanner.scan(domain, options):
                if row:
                    handles[scanner]['writer'].writerow([domain] + row)

    # Close up all the files.
    for scanner in scanners:
        handles[scanner]['file'].close()

    logging.warn("Results written to CSV.")


# Yield domain names from a single string, or a CSV of them.
def domains_from(arg):
    if arg.endswith(".csv"):
        with open(arg, newline='') as csvfile:
            for row in csv.reader(csvfile):
                if (not row[0]) or (row[0].lower().startswith("domain")):
                    continue
                yield row[0].lower()
    else:
        yield arg

if __name__ == '__main__':
    run(options)
